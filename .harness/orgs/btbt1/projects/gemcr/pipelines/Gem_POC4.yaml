pipeline:
  name: Gem_POC4
  identifier: Gem_POC4
  projectIdentifier: gemcr
  orgIdentifier: btbt1
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: harnessgitconnector
        build: <+input>
  stages:
    - stage:
        name: CI Build
        identifier: CI_Build
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          caching:
            enabled: true
            override: false
          infrastructure:
            type: KubernetesDirect
            spec:
              connectorRef: Gem_kube
              namespace: ns-aced9b
              automountServiceAccountToken: true
              nodeSelector: {}
              os: Linux
          execution:
            steps:
              - stepGroup:
                  stageType: CI
                  steps:
                    - step:
                        type: Run
                        name: Setup
                        identifier: Setup_Python
                        spec:
                          connectorRef: account.Docker_Remote_GAR
                          image: europe-docker.pkg.dev/dv-sts-psv-tool-svc-bak-08870/staging/docker.io/curlimages/curl:8.11.0
                          shell: Sh
                          command: |
                            cat <<'EOF' > /harness/pip.conf
                            [global]
                            index=https://nexus-osg.tooling01.dev.c2.lloydsbanking.cloud/repository/python-proxy/pypi
                            index-url=https://nexus-osg.tooling01.dev.c2.lloydsbanking.cloud/repository/python-proxy/simple
                            trusted-host=nexus-osg.tooling01.dev.c2.lloydsbanking.cloud
                            cache-dir=/shared/pipcache
                            EOF
                            cat <<'EOF' > /harness/.pypirc
                            [distutils]
                            index-servers =
                                pypi

                            [pypi]
                            repository = https://nexus-osg.tooling01.dev.c2.lloydsbanking.cloud/repository/python-proxy/pypi
                            EOF
                            curl -o /harness/cacert.pem https://dev.vault.02c5d1d0-4e30-4111-bc2f-6a0c7cc5677c.aws.hashicorp.cloud:8200/v1/admin/dev/pki/root/ca/pem
                            file="/harness/pyproject.toml"
                            if [ "<+stepGroup.variables.name_override>" = null ]; then
                              PKG_NAME=$(awk -F'[ ="]+' '$1 == "name" { print $2 }' $file)
                            else
                              PKG_NAME=<+stepGroup.variables.name_override>
                            fi
                            if [ "<+stepGroup.variables.vers_override>" = null ]; then
                              PKG_VERSION=$(awk -F'[ ="]+' '$1 == "version" { print $2 }' $file)
                            else
                              PKG_VERSION=<+stepGroup.variables.vers_override>
                            fi
                          outputVariables:
                            - name: PKG_NAME
                            - name: PKG_VERSION
                          resources:
                            limits:
                              cpu: "1"
                  variables:
                    - name: name_override
                      type: String
                      value: <+input>
                      description: App name override - Required only if not in pyproject.toml, or to override pyproject.toml
                    - name: vers_override
                      type: String
                      value: <+input>
                      description: App version override - Required only if not in pyproject.toml, or to override pyproject.toml
                  name: Init
                  identifier: Init
              - stepGroup:
                  stageType: CI
                  steps:
                    - step:
                        type: Run
                        name: build
                        identifier: build
                        spec:
                          connectorRef: account.Docker_Remote_GAR
                          image: python
                          shell: Sh
                          command: |-
                            export PIP_CONFIG_FILE=/harness/pip.conf
                            pip3 install build
                            <+stepGroup.variables.python_cmd_override>
                          resources:
                            limits:
                              cpu: "1"
                        when:
                          stageStatus: Success
                          condition: <+stepGroup.variables.python_version>==<+matrix.version>
                  strategy:
                    matrix:
                      version:
                        - 3.9.17
                        - 3.10-slim
                        - 3.11
                        - 3.12
                  variables:
                    - name: python_cmd_override
                      type: String
                      value: <+input>.default(python3 -m build)
                      description: Command override - If not specified template will execute `python3 -m build`
                      required: false
                    - name: python_version
                      type: String
                      description: ""
                      required: false
                      value: <+input>.default(3.11).allowedValues(3.9.17,3.10-slim,3.11,3.12)
                  name: PB
                  identifier: PB
              - stepGroup:
                  stageType: CI
                  steps:
                    - step:
                        type: BuildAndPushGAR
                        name: Build Image
                        identifier: build_image
                        spec:
                          connectorRef: account.gcp_ddv_dv_staging_gar_gsa
                          host: europe-docker.pkg.dev
                          projectID: dv-sts-psv-tool-svc-bak-08870
                          imageName: build/<+stepGroup.variables.ORG_ID>/<+stepGroup.variables.PROJECT_ID>/<+stepGroup.variables.CMDB_APPID>/images/<+stepGroup.variables.IMAGE_NAME>
                          tags:
                            - <+stepGroup.variables.IMAGE_TAG>
                          caching: false
                          dockerfile: <+input>
                          buildArgs: <+input>
                          remoteCacheImage: build/<+org.identifier>/<+project.identifier>/<+stepGroup.variables.CMDB_APPID>/images/<+stepGroup.variables.IMAGE_NAME>
                          resources:
                            limits:
                              memory: 4Gi
                              cpu: "2"
                    - step:
                        identifier: pull_image_to_tar
                        type: Run
                        name: Pull Image to Tar
                        spec:
                          connectorRef: account.gcp_ddv_dv_staging_gar
                          image: europe-docker.pkg.dev/dv-sts-psv-tool-svc-bak-08870/staging/gcr.io/go-containerregistry/crane:debug
                          shell: Sh
                          command: |-
                            # Fetch secrets based on the provided environment using identifier
                            rm -f /harness/gcpdvstaginggarsa.json
                            cat <<'EOF' >> /harness/gcpdvstaginggarsa.json
                            <+secrets.getValue("account.gcp_ddv_dv_staging_gar_push_gsa_json_key")>
                            EOF

                            cat /harness/gcpdvstaginggarsa.json | crane auth login europe-docker.pkg.dev -u _json_key --password-stdin

                            # Push the image
                            crane pull ${SOURCE_IMAGE} ${TAR_PATH}

                            rm -f /harness/gcpdvstaginggarsa.json
                          envVariables:
                            TAR_PATH: <+stepGroup.variables.TAR_PATH>
                            SOURCE_IMAGE: <+stepGroup.variables.SOURCE_IMAGE_URL>
                          imagePullPolicy: IfNotPresent
                    - parallel:
                        - step:
                            identifier: aqua_saas_scan
                            type: AquaSecurity
                            name: Aqua SaaS Scan
                            spec:
                              mode: orchestration
                              config: default
                              target:
                                type: container
                                workspace: <+stepGroup.variables.TAR_PATH>
                                detection: manual
                                name: <+stepGroup.variables.IMAGE_NAME>
                                variant: <+stepGroup.variables.IMAGE_TAG>
                              advanced:
                                log:
                                  level: info
                                fail_on_severity: none
                                args:
                                  cli: "--dockerless --layer-vulnerabilities --direct-cc"
                              resources:
                                limits:
                                  memory: 4Gi
                                  cpu: "2"
                              privileged: true
                              imagePullPolicy: IfNotPresent
                              connectorRef: account.harness_ci_addon
                              image:
                                type: local_archive
                                access_id: _json_key
                                access_token: <+secrets.getValue("account.gcp_ddv_dv_staging_gar_push_gsa_json_key")>
                                tag: <+stepGroup.variables.IMAGE_TAG>
                              auth:
                                access_token: <+secrets.getValue("account.aquasec_prod_token")>
                                domain: https://6d1247bb0e.cloud.aquasec.com
                            enforce:
                              policySets:
                                - account.Security_Test_Compliance
                        - stepGroup:
                            name: NexusIQ Scan
                            identifier: NexusIQ_Scan
                            template:
                              templateRef: account.NexusIQ_Scan_StepGroup
                              versionLabel: v0.2.0
                              templateInputs:
                                variables:
                                  - name: cmdb_appid
                                    type: String
                                    value: <+input>
                                  - name: SCAN_TARGET
                                    type: String
                                    value: /harness/image.tar
                    - step:
                        type: Plugin
                        name: Publish to Dev
                        identifier: pusblish_to_dev
                        spec:
                          connectorRef: account.gcp_ddv_dv_staging_gar
                          image: europe-docker.pkg.dev/dv-sts-psv-tool-svc-bak-08870/staging/docker.io/plugins/image-migration:linux-amd64
                          settings:
                            source: <+stepGroup.variables.SOURCE_IMAGE_URL>
                            destination: <+stepGroup.variables.DESTINATION_IMAGE_URL>
                            username: _json_key
                            password: <+secrets.getValue("account.gcp_ddv_dv_staging_gar_push_gsa_json_key")>
                            overwrite: "true"
                    - step:
                        type: Plugin
                        name: Publish Image Path
                        identifier: publish_nexusiq_report
                        spec:
                          connectorRef: account.gcp_ddv_dv_staging_gar
                          image: europe-docker.pkg.dev/dv-sts-psv-tool-svc-bak-08870/staging/docker.io/plugins/artifact-metadata-publisher:2.1.0
                          settings:
                            file_urls: https://<+stepGroup.variables.DESTINATION_IMAGE_URL>
                            artifact_file: Container Image Staging Registry URL
                          imagePullPolicy: IfNotPresent
                  variables:
                    - name: SOURCE_IMAGE_URL
                      type: String
                      description: ""
                      value: europe-docker.pkg.dev/dv-sts-psv-tool-svc-bak-08870/build/<+stepGroup.variables.ORG_ID>/<+stepGroup.variables.PROJECT_ID>/<+stepGroup.variables.CMDB_APPID>/images/<+stepGroup.variables.IMAGE_NAME>:<+stepGroup.variables.IMAGE_TAG>
                    - name: DESTINATION_IMAGE_URL
                      type: String
                      description: ""
                      value: europe-docker.pkg.dev/dv-sts-psv-tool-svc-bak-08870/staging/<+stepGroup.variables.ORG_ID>/<+stepGroup.variables.PROJECT_ID>/<+stepGroup.variables.CMDB_APPID>/images/<+stepGroup.variables.IMAGE_NAME>:<+stepGroup.variables.IMAGE_TAG>
                    - name: IMAGE_NAME
                      type: String
                      value: <+input>.regex(^[a-z0-9]+(?:[._-][a-z0-9]+)*$)
                      description: |
                        This variable specifies the name of the image to be built.
                        It should not include the repository name. For example, myapp or myapp:latest.
                        This variable is used in the build command to name the resulting image appropriately.
                      required: true
                    - name: IMAGE_TAG
                      type: String
                      value: <+input>.regex(^[a-zA-Z0-9._-]+$)
                      description: |
                        This variable specifies the tag for the image to be built.
                        It is used to identify the specific version of the image, such as v1.0, or any other versioning scheme you use.
                        This variable is combined with the IMAGE_NAME in the build command to tag the resulting image correctly.
                      required: true
                    - name: CMDB_APPID
                      type: String
                      value: <+input>.regex(^al\d{5}$)
                      description: |
                        This variable holds the unique identifier for the application in ServiceNow related to the pipeline.
                        The identifier starts with the prefix al followed by exactly five numeric digits.
                        This ensures that each application has a distinct and consistent identifier format.
                        This will be used in the build process as part of the repository path to ensure the image is stored in a unique path.
                        This should be avaialble for input via the expression <+pipeline.tags.cmdb_appid>
                      required: true
                    - name: ORG_ID
                      type: String
                      value: <+<+org.identifier>.toLowerCase().replace("_","-")>
                      description: "Override default org identifier with underscores replaced with hyphens so it is a valid string for container repository paths "
                      required: true
                    - name: PROJECT_ID
                      type: String
                      value: <+<+project.identifier>.toLowerCase().replace("_","-")>
                      description: Override default project identifier with underscores replaced with hyphens so it is a valid string for container repository paths
                      required: true
                    - name: TAR_PATH
                      type: String
                      value: /harness/image.tar
                      description: Sets the path the image will be stored to for scanning
                      required: false
                  name: Image build
                  identifier: Image_build
